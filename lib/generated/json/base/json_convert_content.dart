// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter_jjw_client/bean/index_theme_house_entity.dart';
import 'package:flutter_jjw_client/generated/json/index_theme_house_entity_helper.dart';
import 'package:flutter_jjw_client/bean/index_menu_entity.dart';
import 'package:flutter_jjw_client/generated/json/index_menu_entity_helper.dart';
import 'package:flutter_jjw_client/bean/index_banner_bean_entity.dart';
import 'package:flutter_jjw_client/generated/json/index_banner_bean_entity_helper.dart';
import 'package:flutter_jjw_client/bean/hot_entity.dart';
import 'package:flutter_jjw_client/generated/json/hot_entity_helper.dart';
import 'package:flutter_jjw_client/bean/market_data_entity.dart';
import 'package:flutter_jjw_client/generated/json/market_data_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
			case IndexThemeHouseEntity:
				return indexThemeHouseEntityFromJson(data as IndexThemeHouseEntity, json) as T;
			case IndexThemeHouseData:
				return indexThemeHouseDataFromJson(data as IndexThemeHouseData, json) as T;
			case IndexMenuEntity:
				return indexMenuEntityFromJson(data as IndexMenuEntity, json) as T;
			case IndexMenuData:
				return indexMenuDataFromJson(data as IndexMenuData, json) as T;
			case NavMenuData:
				return navMenuDataFromJson(data as NavMenuData, json) as T;
			case IndexBannerBeanEntity:
				return indexBannerBeanEntityFromJson(data as IndexBannerBeanEntity, json) as T;
			case IndexBannerBeanData:
				return indexBannerBeanDataFromJson(data as IndexBannerBeanData, json) as T;
			case HotEntity:
				return hotEntityFromJson(data as HotEntity, json) as T;
			case HotData:
				return hotDataFromJson(data as HotData, json) as T;
			case MarketDataEntity:
				return marketDataEntityFromJson(data as MarketDataEntity, json) as T;
			case MarketDataData:
				return marketDataDataFromJson(data as MarketDataData, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case IndexThemeHouseEntity:
				return indexThemeHouseEntityToJson(data as IndexThemeHouseEntity);
			case IndexThemeHouseData:
				return indexThemeHouseDataToJson(data as IndexThemeHouseData);
			case IndexMenuEntity:
				return indexMenuEntityToJson(data as IndexMenuEntity);
			case IndexMenuData:
				return indexMenuDataToJson(data as IndexMenuData);
			case NavMenuData:
				return navMenuDataToJson(data as NavMenuData);
			case IndexBannerBeanEntity:
				return indexBannerBeanEntityToJson(data as IndexBannerBeanEntity);
			case IndexBannerBeanData:
				return indexBannerBeanDataToJson(data as IndexBannerBeanData);
			case HotEntity:
				return hotEntityToJson(data as HotEntity);
			case HotData:
				return hotDataToJson(data as HotData);
			case MarketDataEntity:
				return marketDataEntityToJson(data as MarketDataEntity);
			case MarketDataData:
				return marketDataDataToJson(data as MarketDataData);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (IndexThemeHouseEntity).toString()){
			return IndexThemeHouseEntity().fromJson(json);
		}	else if(type == (IndexThemeHouseData).toString()){
			return IndexThemeHouseData().fromJson(json);
		}	else if(type == (IndexMenuEntity).toString()){
			return IndexMenuEntity().fromJson(json);
		}	else if(type == (IndexMenuData).toString()){
			return IndexMenuData().fromJson(json);
		}	else if(type == (NavMenuData).toString()){
			return NavMenuData().fromJson(json);
		}	else if(type == (IndexBannerBeanEntity).toString()){
			return IndexBannerBeanEntity().fromJson(json);
		}	else if(type == (IndexBannerBeanData).toString()){
			return IndexBannerBeanData().fromJson(json);
		}	else if(type == (HotEntity).toString()){
			return HotEntity().fromJson(json);
		}	else if(type == (HotData).toString()){
			return HotData().fromJson(json);
		}	else if(type == (MarketDataEntity).toString()){
			return MarketDataEntity().fromJson(json);
		}	else if(type == (MarketDataData).toString()){
			return MarketDataData().fromJson(json);
		}	
		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(List<IndexThemeHouseEntity>() is M){
			return data.map((e) => IndexThemeHouseEntity().fromJson(e)).toList() as M;
		}	else if(List<IndexThemeHouseData>() is M){
			return data.map((e) => IndexThemeHouseData().fromJson(e)).toList() as M;
		}	else if(List<IndexMenuEntity>() is M){
			return data.map((e) => IndexMenuEntity().fromJson(e)).toList() as M;
		}	else if(List<IndexMenuData>() is M){
			return data.map((e) => IndexMenuData().fromJson(e)).toList() as M;
		}	else if(List<NavMenuData>() is M){
			return data.map((e) => NavMenuData().fromJson(e)).toList() as M;
		}	else if(List<IndexBannerBeanEntity>() is M){
			return data.map((e) => IndexBannerBeanEntity().fromJson(e)).toList() as M;
		}	else if(List<IndexBannerBeanData>() is M){
			return data.map((e) => IndexBannerBeanData().fromJson(e)).toList() as M;
		}	else if(List<HotEntity>() is M){
			return data.map((e) => HotEntity().fromJson(e)).toList() as M;
		}	else if(List<HotData>() is M){
			return data.map((e) => HotData().fromJson(e)).toList() as M;
		}	else if(List<MarketDataEntity>() is M){
			return data.map((e) => MarketDataEntity().fromJson(e)).toList() as M;
		}	else if(List<MarketDataData>() is M){
			return data.map((e) => MarketDataData().fromJson(e)).toList() as M;
		}
		return null;
	}

  static M fromJsonAsT<M>(json) {
    if (json is List) {
      return _getListChildType<M>(json);
    } else {
      return _fromJsonSingle<M>(json) as M;
    }
  }
}